/*
* generated by Xtext
*/
grammar InternalXTuring;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package it.marcotinacci.xturing.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.marcotinacci.xturing.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.marcotinacci.xturing.services.XTuringGrammarAccess;

}

@parser::members {

 	private XTuringGrammarAccess grammarAccess;
 	
    public InternalXTuringParser(TokenStream input, XTuringGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Machine";	
   	}
   	
   	@Override
   	protected XTuringGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	 iv_ruleMachine=ruleMachine 
	 { $current=$iv_ruleMachine.current; } 
	 EOF 
;

// Rule Machine
ruleMachine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alphabet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMachineAccess().getAlphabetKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getSymbolsSymbolParserRuleCall_2_0_0()); 
	    }
		lv_symbols_2_0=ruleSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"symbols",
        		lv_symbols_2_0, 
        		"Symbol");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMachineAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getSymbolsSymbolParserRuleCall_2_1_1_0()); 
	    }
		lv_symbols_4_0=ruleSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"symbols",
        		lv_symbols_4_0, 
        		"Symbol");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMachineAccess().getStatesStateParserRuleCall_4_0()); 
	    }
		lv_states_6_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMachineRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_6_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleSymbol
entryRuleSymbol returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbolRule()); }
	 iv_ruleSymbol=ruleSymbol 
	 { $current=$iv_ruleSymbol.current; } 
	 EOF 
;

// Rule Symbol
ruleSymbol returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_SYMBOL_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSymbolAccess().getNameSYMBOL_IDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSymbolRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SYMBOL_ID");
	    }

)
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_beginState_0_0=	'begin' 
    {
        newLeafNode(lv_beginState_0_0, grammarAccess.getStateAccess().getBeginStateBeginKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "beginState", true, "begin");
	    }

)
)?	otherlv_1='state' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAccess().getStateKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTransactionsTransactionParserRuleCall_4_0()); 
	    }
		lv_transactions_4_0=ruleTransaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"transactions",
        		lv_transactions_4_0, 
        		"Transaction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTransaction
entryRuleTransaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransactionRule()); }
	 iv_ruleTransaction=ruleTransaction 
	 { $current=$iv_ruleTransaction.current; } 
	 EOF 
;

// Rule Transaction
ruleTransaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransactionAccess().getTransactionAction_0(),
            $current);
    }
)((
(
		lv_reading_1_0=	'read' 
    {
        newLeafNode(lv_reading_1_0, grammarAccess.getTransactionAccess().getReadingReadKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "reading", true, "read");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionAccess().getReadReadWriteSymbolParserRuleCall_1_1_0()); 
	    }
		lv_read_2_0=ruleReadWriteSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionRule());
	        }
       		add(
       			$current, 
       			"read",
        		lv_read_2_0, 
        		"ReadWriteSymbol");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?((
(
		lv_writing_3_0=	'write' 
    {
        newLeafNode(lv_writing_3_0, grammarAccess.getTransactionAccess().getWritingWriteKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "writing", true, "write");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransactionAccess().getWriteReadWriteSymbolParserRuleCall_2_1_0()); 
	    }
		lv_write_4_0=ruleReadWriteSymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransactionRule());
	        }
       		add(
       			$current, 
       			"write",
        		lv_write_4_0, 
        		"ReadWriteSymbol");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?((
(
		lv_moving_5_0=	'move' 
    {
        newLeafNode(lv_moving_5_0, grammarAccess.getTransactionAccess().getMovingMoveKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "moving", true, "move");
	    }

)
)((
(
		lv_move_6_0=	'right' 
    {
        newLeafNode(lv_move_6_0, grammarAccess.getTransactionAccess().getMoveRightKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "move", lv_move_6_0, "right");
	    }

)
)
    |(
(
		lv_move_7_0=	'left' 
    {
        newLeafNode(lv_move_7_0, grammarAccess.getTransactionAccess().getMoveLeftKeyword_3_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "move", lv_move_7_0, "left");
	    }

)
)))?(((
(
		lv_next_8_0=	'next' 
    {
        newLeafNode(lv_next_8_0, grammarAccess.getTransactionAccess().getNextNextKeyword_4_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "next", true, "next");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getTransactionAccess().getToStateStateCrossReference_4_0_1_0()); 
	}

)
))
    |(
(
		lv_final_10_0=	'terminate' 
    {
        newLeafNode(lv_final_10_0, grammarAccess.getTransactionAccess().getFinalTerminateKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransactionRule());
	        }
       		setWithLastConsumed($current, "final", true, "terminate");
	    }

)
))?	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransactionAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleReadWriteSymbol
entryRuleReadWriteSymbol returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadWriteSymbolRule()); }
	 iv_ruleReadWriteSymbol=ruleReadWriteSymbol 
	 { $current=$iv_ruleReadWriteSymbol.current; } 
	 EOF 
;

// Rule ReadWriteSymbol
ruleReadWriteSymbol returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadWriteSymbolRule());
	        }
        }
	otherlv_0=RULE_SYMBOL_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReadWriteSymbolAccess().getSymbolSymbolCrossReference_0_0()); 
	}

)
)
    |(
(
		lv_empty_1_0=	'~' 
    {
        newLeafNode(lv_empty_1_0, grammarAccess.getReadWriteSymbolAccess().getEmptyTildeKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReadWriteSymbolRule());
	        }
       		setWithLastConsumed($current, "empty", true, "~");
	    }

)
))
;





RULE_SYMBOL_ID : ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'+'|'*'|'/'|'^'|'.'|'|'|'&'|'='|'<'|'>'|'('|')'|'['|']');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


